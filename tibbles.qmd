# Dataframes {#sec-dataframes}

```{r}
#| echo: false
#| output: false
library(tidyverse)
library(fivethirtyeight)
```

Through the R universe, data is stored in what are referred to as dataframes.  A dataframe is a tabular data format that works a bit like a spreadsheet.  Within the tidyverse, dataframes are organized in a particular way ("tidy" format) and will tend to be stored in a particular type of dataframe (a "tibble").  In this chapter, we'll explore these conventions.

Columns within a dataframe store data of a certain **type** (e.g., decimals, strings, etc.).  Let's take a quick look at a standard R dataframe.  We'll use one of the built-in data sets, `iris`, which contains data about measurements of various flowers.  For now, we'll just take a look at the first five rows:

```{r}
#| echo: false
iris %>%
    head(5)
```

As we can see, each row corresponds to an observation (a flower) and each columns represents a measurement from that flower.

## What is a tibble?

A tibble is a type of dataframe commonly used in the tidyverse. Tibbles contain the same basic information as a corresponding dataframe, but tibbles are slightly different in a variety of minor ways.  Let's take a look at the `iris` data represented as a tibble.  We'll again confine our inspection to the first five rows:

```{r}
#| echo: false
as_tibble(iris) %>%
    head(5)
```

Note that the data is identical to that seen above.  However, the tibble provides some additional useful information.  It tells us that this particular tibble has five columns and, because we only asked for the first five rows, also has five rows.  In addition, it tells us about the **data type** of each column.  The first four columns are of type `dbl`, which is double-precision floating point number (a decimal).  The last column is of type `fct`, or factor.  In R, factors are used to represent categorical variables, variables that have a fixed set of possible values (in this case, the set of species).



## What is "tidy" data?

For the rest of this book, we will primarily deal with data that is already in "tidy" format as well. This is not always the case however with all data sets in the world. If your original dataframe is in wide (not "tidy") format and you would like to use the tidyverse packages, you will first have to convert it to "tidy" format. To do so, we recommend using the `pivot_longer()` function in the `tidyr` package.


Let's load some data from the `fivethirtyeight` package. The `fivethirtyeight` package provides access to the data sets used in many articles published by the data journalism website, [FiveThirtyEight.com](https://fivethirtyeight.com/). For a complete list of all data sets included in the `fivethirtyeight` package, check out [the package webpage](https://fivethirtyeight-r.netlify.app/articles/fivethirtyeight.html).

Let's focus our attention on the `drinks` dataframe:

```{r}
#| echo: false
drinks %>%
  head(5)
```

After reading the help file by running (`?drinks`), you'll see that `drinks` is a dataframe containing results from a survey of beer, spirits, and wine consumption originally reported on FiveThirtyEight.com in Mona Chalabi's article: ["Dear Mona Followup: Where Do People Drink The Most Beer, Wine And Spirits?"](https://fivethirtyeight.com/features/dear-mona-followup-where-do-people-drink-the-most-beer-wine-and-spirits/).

Let's narrow down the data a bit.  We'll only consider 4 countries (the United States, China, Italy, and Saudi Arabia), omit the `total_litres_of_pure_alcohol` variable, and rename the other variables to something a bit more convenient.  Don't worry about the code here.  We'll get into all of these operations more in @sec-dplyr.

```{r}
drinks_smaller <- drinks %>% 
  filter(country %in% c("USA", "China", "Italy", "Saudi Arabia")) %>% 
  select(-total_litres_of_pure_alcohol) %>% 
  rename(beer = beer_servings, spirit = spirit_servings, wine = wine_servings)
drinks_smaller
```

Note that this data is not in "tidy" format.  However, we can convert it to tidy format by using the `pivot_longer()` function from the `tidyr` package as follows:

```{r}
drinks_smaller_tidy <- drinks_smaller %>% 
  pivot_longer(names_to = "type", 
               values_to = "servings", 
               cols = -country)
drinks_smaller_tidy
```

```{r}
#| echo: false
n_row_drinks <- drinks_smaller_tidy %>% nrow()
n_alcohol_types <- drinks_smaller_tidy %>%
  select(type) %>%
  n_distinct()
n_countries <- drinks_smaller_tidy %>%
  select(country) %>%
  n_distinct()
```

We set the arguments to `pivot_longer()` as follows:

1. `names_to` here corresponds to the name of the variable in the new "tidy"/long dataframe that will contain the *column names* of the original data. Observe how we set `names_to = "type"`. In the resulting `drinks_smaller_tidy`, the column `type` contains the three types of alcohol `beer`, `spirit`, and `wine`. Since `type` is a variable name that doesn't appear in `drinks_smaller`, we use quotation marks around it. You'll receive an error if you just use `names_to = type` here.
1. `values_to` here is the name of the variable in the new "tidy" dataframe that will contain the *values* of the original data. Observe how we set `values_to = "servings"` since each of the numeric values in each of the `beer`, `wine`, and `spirit` columns of the `drinks_smaller` data corresponds to a value of `servings`. In the resulting `drinks_smaller_tidy`, the column `servings` contains the `r n_countries` $\times$ `r n_alcohol_types` = `r n_row_drinks` numerical values. Note again that `servings` doesn't appear as a variable in `drinks_smaller` so it again needs quotation marks around it for the `values_to` argument.
1. The third argument `cols` is the columns in the `drinks_smaller` dataframe you either want to or don't want to "tidy." Observe how we set this to `-country` indicating that we don't want to "tidy" the `country` variable in `drinks_smaller` and rather only `beer`, `spirit`, and `wine`. Since `country` is a column that appears in `drinks_smaller` we don't put quotation marks around it.

The third argument here of `cols` is a little nuanced, so let's consider code that's written slightly differently but that produces the same output: 

```{r}
#|eval: false
drinks_smaller %>% 
  pivot_longer(names_to = "type", 
               values_to = "servings", 
               cols = c(beer, spirit, wine))
```

Note that the third argument now specifies which columns we want to "tidy" with `c(beer, spirit, wine)`, instead of the columns we don't want to "tidy" using `-country`. We use the `c()` function to create a vector of the columns in `drinks_smaller` that we'd like to "tidy." Note that since these three columns appear one after another in the `drinks_smaller` dataframe, we could also do the following for the `cols` argument:

```{r}
drinks_smaller %>% 
  pivot_longer(names_to = "type", 
               values_to = "servings", 
               cols = beer:wine)
drinks_smaller_tidy <- drinks_smaller %>%
  gather(type, servings, -country)
```

Let's see what our "tidy" formatted dataframe, `drinks_smaller_tidy`, looks like.

```{r}
#| echo: false
drinks_smaller_tidy
```

Converting "wide" format data to "tidy" format often confuses new R users. The only way to learn to get comfortable with the `pivot_longer()` function is with practice, practice, and more practice using different data sets. For example, run `?pivot_longer` and look at the examples in the bottom of the help file.

If however you want to convert a "tidy" dataframe to "wide" format, you will need to use the `pivot_wider()`\index{tidyr!pivot\_wider()} function instead. Run `?pivot_wider` and look at the examples in the bottom of the help file for examples.

You can also view examples of both `pivot_longer()` and `pivot_wider()` on the [tidyverse.org](https://tidyr.tidyverse.org/dev/articles/pivot.html#pew) webpage. There's a nice example to check out the different functions available for data tidying and a case study using data from the World Health Organization on that webpage. Furthermore, each week the R4DS Online Learning Community posts a data set in the weekly [`#`TidyTuesday event](https://github.com/rfordatascience/tidytuesday) that might serve as a nice place for you to find other data to explore and transform. 